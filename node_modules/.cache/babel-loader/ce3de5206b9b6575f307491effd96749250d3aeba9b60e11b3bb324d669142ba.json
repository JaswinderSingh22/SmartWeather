{"ast":null,"code":"import { ref, reactive, onMounted } from 'vue';\nimport weatherHeader from '@/components/weatherHeader.vue';\nimport searchBar from '@/components/searchBar.vue';\nexport default {\n  components: {\n    weatherHeader,\n    searchBar\n  },\n  setup() {\n    const location = ref('');\n    const weatherData = reactive(null);\n    const forecastData = reactive([]);\n    const searchLocation = searchQuery => {\n      location.value = searchQuery;\n    };\n    const fetchWeatherData = async () => {\n      try {\n        const apiKey = '3006cdd198364dae8904240fbb0ef9a8';\n        const response = await fetch(`https://api.weatherbit.io/v2.0/forecast/daily?q=${location.value}&appid=${apiKey}&units=metric`);\n        const data = await response.json();\n        weatherData.value = data;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const fetchForecastData = async () => {\n      try {\n        const apiKey = '3006cdd198364dae8904240fbb0ef9a8';\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${location.value}&appid=${apiKey}&units=metric`);\n        const data = await response.json();\n        forecastData.value = data.list;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    // Fetch weather data and forecast when location changes\n    onMounted(() => {\n      fetchWeatherData();\n      fetchForecastData();\n    });\n    return {\n      weatherData,\n      forecastData,\n      searchLocation\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","weatherHeader","searchBar","components","setup","location","weatherData","forecastData","searchLocation","searchQuery","value","fetchWeatherData","apiKey","response","fetch","data","json","error","console","fetchForecastData","list"],"sources":["/Users/turbanator/Documents/CODING/FRONT-END/weather-app/src/views/HomeView.vue"],"sourcesContent":["<template>\n  <div>\n    <weatherHeader />\n\n    <!-- searchBar -->\n    <searchBar  @search=\"searchLocation\"/>\n    \n    <!-- Weather Data -->\n\n    <div v-if=\"weatherData\">\n      <h2 class=\"text-xl font-bold mt-4\">Current Weather</h2>\n      <div class=\"bg-gray-200 p-4 rounded\">\n        <p class=\"font-bold\">{{ weatherData.name }}</p>\n        <p class=\"text-lg\">{{ weatherData.weather[0].description }}</p>\n        <p class=\"text-4xl font-bold\">{{ weatherData.main.temp }}°C</p>\n      </div>\n      <h2 class=\"text-xl font-bold mt-4\">Forecast</h2>\n      <div class=\"grid grid-cols-3 gap-4\">\n        <div v-for=\"forecast in forecastData\" :key=\"forecast.dt\" class=\"bg-gray-200 p-4 rounded\">\n          <p>{{ forecast.dt_txt }}</p>\n          <p class=\"text-lg\">{{ forecast.weather[0].description }}</p>\n          <p class=\"text-2xl font-bold\">{{ forecast.main.temp }}°C</p>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, onMounted } from 'vue';\nimport weatherHeader from '@/components/weatherHeader.vue'\nimport searchBar from '@/components/searchBar.vue'\n\nexport default {\n  components: {\n    weatherHeader,\n    searchBar,\n\n  },\n  setup() {\n    const location = ref('');\n    const weatherData = reactive(null);\n    const forecastData = reactive([]);\n\n    const searchLocation = (searchQuery) => {\n      location.value = searchQuery;\n    };\n\n    const fetchWeatherData = async () => {\n      try {\n        const apiKey = '3006cdd198364dae8904240fbb0ef9a8';\n        const response = await fetch(\n          `https://api.weatherbit.io/v2.0/forecast/daily?q=${location.value}&appid=${apiKey}&units=metric`\n        );\n        const data = await response.json();\n        weatherData.value = data;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const fetchForecastData = async () => {\n      try {\n        const apiKey = '3006cdd198364dae8904240fbb0ef9a8';\n        const response = await fetch(\n          `https://api.openweathermap.org/data/2.5/forecast?q=${location.value}&appid=${apiKey}&units=metric`\n        );\n        const data = await response.json();\n        forecastData.value = data.list;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    // Fetch weather data and forecast when location changes\n    onMounted(() => {\n      fetchWeatherData();\n      fetchForecastData();\n    });\n\n    return {\n      weatherData,\n      forecastData,\n      searchLocation\n    };\n  }\n};\n</script>\n"],"mappings":"AA6BA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAQ,QAAS,KAAK;AAC9C,OAAOC,aAAY,MAAO,gCAA+B;AACzD,OAAOC,SAAQ,MAAO,4BAA2B;AAEjD,eAAe;EACbC,UAAU,EAAE;IACVF,aAAa;IACbC;EAEF,CAAC;EACDE,KAAKA,CAAA,EAAG;IACN,MAAMC,QAAO,GAAIP,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMQ,WAAU,GAAIP,QAAQ,CAAC,IAAI,CAAC;IAClC,MAAMQ,YAAW,GAAIR,QAAQ,CAAC,EAAE,CAAC;IAEjC,MAAMS,cAAa,GAAKC,WAAW,IAAK;MACtCJ,QAAQ,CAACK,KAAI,GAAID,WAAW;IAC9B,CAAC;IAED,MAAME,gBAAe,GAAI,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMC,MAAK,GAAI,kCAAkC;QACjD,MAAMC,QAAO,GAAI,MAAMC,KAAK,CACzB,mDAAkDT,QAAQ,CAACK,KAAM,UAASE,MAAO,eACpF,CAAC;QACD,MAAMG,IAAG,GAAI,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCV,WAAW,CAACI,KAAI,GAAIK,IAAI;MAC1B,EAAE,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAED,MAAME,iBAAgB,GAAI,MAAAA,CAAA,KAAY;MACpC,IAAI;QACF,MAAMP,MAAK,GAAI,kCAAkC;QACjD,MAAMC,QAAO,GAAI,MAAMC,KAAK,CACzB,sDAAqDT,QAAQ,CAACK,KAAM,UAASE,MAAO,eACvF,CAAC;QACD,MAAMG,IAAG,GAAI,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCT,YAAY,CAACG,KAAI,GAAIK,IAAI,CAACK,IAAI;MAChC,EAAE,OAAOH,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;;IAED;IACAjB,SAAS,CAAC,MAAM;MACdW,gBAAgB,CAAC,CAAC;MAClBQ,iBAAiB,CAAC,CAAC;IACrB,CAAC,CAAC;IAEF,OAAO;MACLb,WAAW;MACXC,YAAY;MACZC;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}