{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.searchQuery = $event),\n    onInput: _cache[1] || (_cache[1] = (...args) => $setup.fetchResults && $setup.fetchResults(...args)),\n    placeholder: \"Enter city or country\"\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, $setup.searchQuery]]), $setup.results.length ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.results, result => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: result.id,\n      onClick: $event => $setup.selectResult(result)\n    }, _toDisplayString(result.name) + \", \" + _toDisplayString(result.country), 9 /* TEXT, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","$setup","searchQuery","$event","onInput","_cache","args","fetchResults","placeholder","results","length","_hoisted_1","_Fragment","_renderList","result","key","id","onClick","selectResult","name","_toDisplayString","country","_hoisted_2"],"sources":["/Users/turbanator/Documents/CODING/FRONT-END/weather-app/src/components/searchBar.vue"],"sourcesContent":["<template>\n    <div>\n      <input v-model=\"searchQuery\" @input=\"fetchResults\" placeholder=\"Enter city or country\">\n      <ul v-if=\"results.length\">\n        <li v-for=\"result in results\" :key=\"result.id\" @click=\"selectResult(result)\">\n          {{ result.name }}, {{ result.country }}\n        </li>\n      </ul>\n    </div>\n  </template>\n  \n  <script>\n  import { ref } from 'vue';\n  import { useStore } from 'vuex';\n  \n  export default {\n    name: 'SearchBar',\n    setup() {\n      const searchQuery = ref('');\n      const results = ref([]);\n      const store = useStore();\n  \n      const fetchResults = async () => {\n        // Call weather API with searchQuery and update results\n        // Use store actions to fetch the results and update the store\n        // e.g., store.dispatch('fetchWeatherResults', searchQuery);\n      };\n  \n      const selectResult = (result) => {\n        // Update selected city in store\n        // e.g., store.commit('selectCity', result);\n      };\n  \n      return { searchQuery, results, fetchResults, selectResult };\n    },\n  };\n  </script>\n  \n  <style>\n  /* Apply Tailwind CSS classes or custom styling here */\n  </style>\n  "],"mappings":";;;;;;uBACIA,mBAAA,CAOM,c,gBANJC,mBAAA,CAAuF;+DAAvEC,MAAA,CAAAC,WAAW,GAAAC,MAAA;IAAGC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEL,MAAA,CAAAM,YAAA,IAAAN,MAAA,CAAAM,YAAA,IAAAD,IAAA,CAAY;IAAEE,WAAW,EAAC;iEAA/CP,MAAA,CAAAC,WAAW,E,GACjBD,MAAA,CAAAQ,OAAO,CAACC,MAAM,I,cAAxBX,mBAAA,CAIK,MAAAY,UAAA,I,kBAHHZ,mBAAA,CAEKa,SAAA,QAAAC,WAAA,CAFgBZ,MAAA,CAAAQ,OAAO,EAAjBK,MAAM;yBAAjBf,mBAAA,CAEK;MAF0BgB,GAAG,EAAED,MAAM,CAACE,EAAE;MAAGC,OAAK,EAAAd,MAAA,IAAEF,MAAA,CAAAiB,YAAY,CAACJ,MAAM;wBACrEA,MAAM,CAACK,IAAI,IAAG,IAAE,GAAAC,gBAAA,CAAGN,MAAM,CAACO,OAAO,wBAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}