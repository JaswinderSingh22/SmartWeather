{"ast":null,"code":"import { createStore } from 'vuex';\nconst store = createStore({\n  state: {\n    searchResults: [],\n    selectedCity: null,\n    weatherData: null,\n    forecastData: []\n  },\n  mutations: {\n    updateSearchResults(state, results) {\n      state.searchResults = results;\n    },\n    selectCity(state, city) {\n      state.selectedCity = city;\n    },\n    updateWeatherData(state, data) {\n      state.weatherData = data;\n    },\n    updateForecastData(state, data) {\n      state.forecastData = data;\n    }\n  },\n  actions: {\n    // async fetchWeatherResults({ commit }, searchQuery) {\n    // Call weather API with searchQuery and update searchResults in the store\n    // e.g., const results = await fetchWeatherResultsFromAPI(searchQuery);\n    // commit('updateSearchResults', results);\n    // },\n    // async fetchWeatherData({ commit }, city) {\n    // Call weather API with selected city and update weatherData in the store\n    // e.g., const data = await fetchWeatherDataFromAPI(city);\n    // commit('updateWeatherData', data);\n    // },\n    // async fetchForecastData({ commit }, city) {\n    // Call weather API with selected city and update forecastData in the store\n    // e.g., const forecast = await fetchForecastDataFromAPI(city);\n    // commit('updateForecastData', forecast);\n    // },\n  }\n});\nexport default store;","map":{"version":3,"names":["createStore","store","state","searchResults","selectedCity","weatherData","forecastData","mutations","updateSearchResults","results","selectCity","city","updateWeatherData","data","updateForecastData","actions"],"sources":["/Users/turbanator/Documents/CODING/FRONT-END/weather-app/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex';\n\nconst store = createStore({\n  state: {\n    searchResults: [],\n    selectedCity: null,\n    weatherData: null,\n    forecastData: [],\n  },\n  mutations: {\n    updateSearchResults(state, results) {\n      state.searchResults = results;\n    },\n    selectCity(state, city) {\n      state.selectedCity = city;\n    },\n    updateWeatherData(state, data) {\n      state.weatherData = data;\n    },\n    updateForecastData(state, data) {\n      state.forecastData = data;\n    },\n  },\n  actions: {\n    // async fetchWeatherResults({ commit }, searchQuery) {\n      // Call weather API with searchQuery and update searchResults in the store\n      // e.g., const results = await fetchWeatherResultsFromAPI(searchQuery);\n      // commit('updateSearchResults', results);\n    // },\n    // async fetchWeatherData({ commit }, city) {\n      // Call weather API with selected city and update weatherData in the store\n      // e.g., const data = await fetchWeatherDataFromAPI(city);\n      // commit('updateWeatherData', data);\n    // },\n    // async fetchForecastData({ commit }, city) {\n      // Call weather API with selected city and update forecastData in the store\n      // e.g., const forecast = await fetchForecastDataFromAPI(city);\n      // commit('updateForecastData', forecast);\n    // },\n  },\n});\n\nexport default store;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;AAElC,MAAMC,KAAK,GAAGD,WAAW,CAAC;EACxBE,KAAK,EAAE;IACLC,aAAa,EAAE,EAAE;IACjBC,YAAY,EAAE,IAAI;IAClBC,WAAW,EAAE,IAAI;IACjBC,YAAY,EAAE;EAChB,CAAC;EACDC,SAAS,EAAE;IACTC,mBAAmBA,CAACN,KAAK,EAAEO,OAAO,EAAE;MAClCP,KAAK,CAACC,aAAa,GAAGM,OAAO;IAC/B,CAAC;IACDC,UAAUA,CAACR,KAAK,EAAES,IAAI,EAAE;MACtBT,KAAK,CAACE,YAAY,GAAGO,IAAI;IAC3B,CAAC;IACDC,iBAAiBA,CAACV,KAAK,EAAEW,IAAI,EAAE;MAC7BX,KAAK,CAACG,WAAW,GAAGQ,IAAI;IAC1B,CAAC;IACDC,kBAAkBA,CAACZ,KAAK,EAAEW,IAAI,EAAE;MAC9BX,KAAK,CAACI,YAAY,GAAGO,IAAI;IAC3B;EACF,CAAC;EACDE,OAAO,EAAE;IACP;IACE;IACA;IACA;IACF;IACA;IACE;IACA;IACA;IACF;IACA;IACE;IACA;IACA;IACF;EAAA;AAEJ,CAAC,CAAC;AAEF,eAAed,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}