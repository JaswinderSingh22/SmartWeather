{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_weatherHeader = _resolveComponent(\"weatherHeader\");\n  const _component_searchBar = _resolveComponent(\"searchBar\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_weatherHeader), _createCommentVNode(\" searchBar \"), _createVNode(_component_searchBar, {\n    onSearch: $setup.searchLocation\n  }, null, 8 /* PROPS */, [\"onSearch\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_weatherHeader","_createCommentVNode","_component_searchBar","onSearch","$setup","searchLocation"],"sources":["/Users/turbanator/Documents/CODING/FRONT-END/weather-app/src/views/HomeView.vue"],"sourcesContent":["<template>\n  <div>\n    <weatherHeader />\n\n    <!-- searchBar -->\n    <searchBar  @search=\"searchLocation\"/>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, onMounted } from 'vue';\nimport weatherHeader from '@/components/weatherHeader.vue'\nimport searchBar from '@/components/searchBar.vue'\n\nexport default {\n  components: {\n    weatherHeader,\n    searchBar,\n\n  },\n  setup() {\n    const location = ref('');\n    const weatherData = reactive(null);\n    const forecastData = reactive([]);\n\n    const searchLocation = (searchQuery) => {\n      location.value = searchQuery;\n    };\n\n    const fetchWeatherData = async () => {\n      try {\n        const apiKey = '3006cdd198364dae8904240fbb0ef9a8';\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/?q=${location.value}&apiid=${apiKey}`);\n        const data = await response.json();\n        console.log(\"data:\", data);\n        weatherData.value = data;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const fetchForecastData = async () => {\n      try {\n        const apiKey = '3006cdd198364dae8904240fbb0ef9a8';\n        const response = await fetch(\n          `https://api.weatherbit.io/v2.0/forecast/daily?q=${location.value}&appid=${apiKey}&units=metric`\n        );\n        const data = await response.json();\n        forecastData.value = data.list;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    // Fetch weather data and forecast when location changes\n    onMounted(() => {\n      fetchWeatherData();\n      fetchForecastData();\n    });\n\n    return {\n      weatherData,\n      forecastData,\n      searchLocation\n    };\n  }\n};\n</script>\n"],"mappings":";;;;uBACEA,mBAAA,CAKM,cAJJC,YAAA,CAAiBC,wBAAA,GAEjBC,mBAAA,eAAkB,EAClBF,YAAA,CAAsCG,oBAAA;IAAzBC,QAAM,EAAEC,MAAA,CAAAC;EAAc,sC"},"metadata":{},"sourceType":"module","externalDependencies":[]}