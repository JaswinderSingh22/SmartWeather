{"ast":null,"code":"import { computed, onMounted, watch } from 'vue';\nimport { useStore } from 'vuex';\nexport default {\n  name: 'WeatherDisplay',\n  setup() {\n    const store = useStore();\n    const formattedTime = timestamp => {\n      const date = new Date(timestamp * 1000); // Convert timestamp to milliseconds\n      const hours = date.getHours();\n      const minutes = date.getMinutes();\n      const seconds = date.getSeconds();\n      return `${hours}:${minutes}:${seconds}`;\n    };\n    const selectedCity = computed(() => store.state.selectedCity);\n    const getWeatherIcon = computed(() => store.getters['getWeatherIcon']);\n    const weatherData = computed(() => store.state.weatherData);\n    watch(selectedCity, newSelectedCity => {\n      if (newSelectedCity !== null) {\n        // Fetch weather data and forecast data based on the selected city\n        store.dispatch('fetchWeatherData');\n        store.dispatch('fetchForecastData');\n      }\n    });\n    onMounted(() => {\n      store.dispatch('fetchWeatherData');\n    });\n    return {\n      selectedCity,\n      weatherData,\n      getWeatherIcon,\n      formattedTime\n    };\n  }\n};","map":{"version":3,"names":["computed","onMounted","watch","useStore","name","setup","store","formattedTime","timestamp","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","selectedCity","state","getWeatherIcon","getters","weatherData","newSelectedCity","dispatch"],"sources":["/Users/turbanator/Documents/CODING/SmartWeather/src/components/WeatherDisplay.vue"],"sourcesContent":["<template>\n    <div class=\"flex flex-col items-center flex-1 \">\n      <div class=\"flex\">\n        <h2 class=\"text-2xl font-bold mb-4\">{{ selectedCity.name }}, {{ selectedCity.country }}, Today</h2>\n      </div>\n      <div v-if=\"weatherData\" class=\"flex flex-1 weatherLogo justify-evenly p-4 w-1/2 h-40  items-center bg-blue-300 border border-blue-200 rounded-lg mr-4 mb-4\">\n        <div class=\"\">\n          <p class=\"text-xl font-bold\">Temperature: {{ weatherData.current.temp }}°C</p>\n          <p class=\"text-lg font-bold\">Feels Like: {{ weatherData.current.feels_like }}°C</p>\n          <p class=\"text-lg font-bold\">Sunrise: {{ formattedTime(weatherData.current.sunrise) }}</p>\n          <p class=\"text-lg font-bold\">Sunset: {{ formattedTime(weatherData.current.sunset) }}</p>\n          <p class=\"text-lg font-bold\">Condition: {{ weatherData.current.weather[0].description }}</p>\n          <p class=\"text-lg font-bold\">Pressure: {{ weatherData.current.pressure }}</p>\n          <p class=\"text-lg font-bold\">Clouds: {{ weatherData.current.clouds }}</p>\n          <p class=\"text-lg font-bold\">Visibility: {{ weatherData.current.visibility }}</p>\n          <p class=\"text-lg font-bold\">Condition: {{ weatherData.current.weather[0].description }}</p>\n        </div>\n        <div class=\"weather-icon\">\n          <i :class=\"[getWeatherIcon(weatherData.current.weather[0].icon), 'text-9xl']\"></i>\n      </div>\n    </div>\n    <div v-else>\n      <p>Loading weather data...</p>\n    </div>\n  </div>\n  </template>\n  \n  <script>\n  import { computed, onMounted, watch } from 'vue';\n  import { useStore } from 'vuex';\n  \n  export default {\n    name: 'WeatherDisplay',\n    setup() {\n      const store = useStore();\n      const formattedTime = (timestamp) => {\n          const date = new Date(timestamp * 1000); // Convert timestamp to milliseconds\n          const hours = date.getHours();\n          const minutes = date.getMinutes();\n          const seconds = date.getSeconds();\n        return`${hours}:${minutes}:${seconds}`;\n      };\n\n      const selectedCity = computed(() => store.state.selectedCity);\n      const getWeatherIcon = computed(() => store.getters['getWeatherIcon']);\n      const weatherData = computed(() => store.state.weatherData);\n        watch(selectedCity, (newSelectedCity) => {\n        if (newSelectedCity !== null) {\n          // Fetch weather data and forecast data based on the selected city\n          store.dispatch('fetchWeatherData');\n          store.dispatch('fetchForecastData');\n          \n        }\n    });\n\n    onMounted(() => {\n      store.dispatch('fetchWeatherData');\n    });\n  \n      return { selectedCity, weatherData,getWeatherIcon, formattedTime };\n    },\n  };\n  </script>\n<style scoped>\n.weatherLogo{\n  background-image:url(\"src/assets/weather.jpg\");\n}\n</style>"],"mappings":"AA4BE,SAASA,QAAQ,EAAEC,SAAS,EAAEC,KAAI,QAAS,KAAK;AAChD,SAASC,QAAO,QAAS,MAAM;AAE/B,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,KAAKA,CAAA,EAAG;IACN,MAAMC,KAAI,GAAIH,QAAQ,CAAC,CAAC;IACxB,MAAMI,aAAY,GAAKC,SAAS,IAAK;MACjC,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAACF,SAAQ,GAAI,IAAI,CAAC,EAAE;MACzC,MAAMG,KAAI,GAAIF,IAAI,CAACG,QAAQ,CAAC,CAAC;MAC7B,MAAMC,OAAM,GAAIJ,IAAI,CAACK,UAAU,CAAC,CAAC;MACjC,MAAMC,OAAM,GAAIN,IAAI,CAACO,UAAU,CAAC,CAAC;MACnC,OAAO,GAAEL,KAAM,IAAGE,OAAQ,IAAGE,OAAQ,EAAC;IACxC,CAAC;IAED,MAAME,YAAW,GAAIjB,QAAQ,CAAC,MAAMM,KAAK,CAACY,KAAK,CAACD,YAAY,CAAC;IAC7D,MAAME,cAAa,GAAInB,QAAQ,CAAC,MAAMM,KAAK,CAACc,OAAO,CAAC,gBAAgB,CAAC,CAAC;IACtE,MAAMC,WAAU,GAAIrB,QAAQ,CAAC,MAAMM,KAAK,CAACY,KAAK,CAACG,WAAW,CAAC;IACzDnB,KAAK,CAACe,YAAY,EAAGK,eAAe,IAAK;MACzC,IAAIA,eAAc,KAAM,IAAI,EAAE;QAC5B;QACAhB,KAAK,CAACiB,QAAQ,CAAC,kBAAkB,CAAC;QAClCjB,KAAK,CAACiB,QAAQ,CAAC,mBAAmB,CAAC;MAErC;IACJ,CAAC,CAAC;IAEFtB,SAAS,CAAC,MAAM;MACdK,KAAK,CAACiB,QAAQ,CAAC,kBAAkB,CAAC;IACpC,CAAC,CAAC;IAEA,OAAO;MAAEN,YAAY;MAAEI,WAAW;MAACF,cAAc;MAAEZ;IAAc,CAAC;EACpE;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}