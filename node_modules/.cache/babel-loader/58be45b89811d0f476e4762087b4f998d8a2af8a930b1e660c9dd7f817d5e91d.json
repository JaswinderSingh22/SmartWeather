{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"flex flex-wrap flex-col justify-center\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h2\", {\n  class: \"text-2xl font-bold mb-4\"\n}, \"Forecast upcoming 7 days....\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  class: \"flex\"\n};\nconst _hoisted_5 = {\n  key: 1\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Loading forecast data...\", -1 /* HOISTED */);\nconst _hoisted_7 = [_hoisted_6];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, $setup.forecastData.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"ul\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.forecastData, forecast => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: forecast.dt,\n      class: \"w-1/7 flex flex-col p-4 bg-gray-100 border border-gray-200 rounded-lg mr-4 mb-4\"\n    }, [_createElementVNode(\"p\", null, \"Date: \" + _toDisplayString($setup.formatDate(forecast.dt)), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Temperature: \" + _toDisplayString(forecast.temp.day) + \"째C\", 1 /* TEXT */), _createElementVNode(\"p\", null, \"Feels Like: \" + _toDisplayString(forecast.feels_like.day) + \"째C\", 1 /* TEXT */), _createElementVNode(\"p\", null, \"Condition: \" + _toDisplayString(forecast.weather[0].description), 1 /* TEXT */), _createTextVNode(\" \" + _toDisplayString(forecast.weather[0].icon) + \" \", 1 /* TEXT */), _createElementVNode(\"i\", {\n      class: _normalizeClass($setup.getWeatherIcon(forecast.weather[0].icon))\n    }, null, 2 /* CLASS */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_5, _hoisted_7))]);\n}","map":{"version":3,"names":["class","_createElementVNode","_hoisted_6","_createElementBlock","_hoisted_1","_hoisted_2","$setup","forecastData","length","_hoisted_3","_hoisted_4","_Fragment","_renderList","forecast","key","dt","_toDisplayString","formatDate","temp","day","feels_like","weather","description","icon","_normalizeClass","getWeatherIcon","_hoisted_5","_hoisted_7"],"sources":["/Users/turbanator/Documents/CODING/SmartWeather/src/components/WeatherForecast.vue"],"sourcesContent":["<template>\n    <div class=\"flex flex-wrap flex-col justify-center\">\n    <h2 class=\"text-2xl font-bold mb-4\">Forecast upcoming 7 days....</h2>\n    <div v-if=\"forecastData.length > 0\">\n      <ul class=\"flex\">\n        <li v-for=\"forecast in forecastData\" :key=\"forecast.dt\" class=\"w-1/7 flex flex-col p-4 bg-gray-100 border border-gray-200 rounded-lg mr-4 mb-4\">\n          <p >Date: {{ formatDate(forecast.dt) }}</p>\n          <p>Temperature: {{ forecast.temp.day }}째C</p>\n          <p>Feels Like: {{ forecast.feels_like.day }}째C</p>\n          <p>Condition: {{ forecast.weather[0].description }}</p>\n          {{ forecast.weather[0].icon }}\n          <i :class=\"getWeatherIcon(forecast.weather[0].icon)\"></i>\n        </li>\n      </ul>\n    </div>\n    <div v-else>\n      <p>Loading forecast data...</p>\n    </div>\n  </div>\n  </template>\n  \n  <script>\n  import { computed, onMounted } from 'vue';\n  import { useStore } from 'vuex';\n  \n  export default {\n    name: 'WeatherForecast',\n    setup() {\n      const store = useStore();\n  \n      const forecastData = computed(() => store.state.forecastData);\n      onMounted(() => {\n      store.dispatch('fetchForecastData');\n    });\n\n    const formatDate = (timestamp) => {\n      const date = new Date(timestamp * 1000);\n      return date.toLocaleDateString();\n    };\n\n    // Map weather icon code to the appropriate icon class\n    const getWeatherIcon = (iconCode) => {\n      switch (iconCode) {\n        case '01n':\n          return 'wi wi-day-sunny';\n        case '02n':\n          return 'wi wi-day-cloudy';\n        case '03n':\n        case '04n':\n          return 'wi wi-cloud';\n        case '09n':\n          return 'wi wi-day-showers';\n        case '10n':\n          return 'wi wi-day-rain';\n        case '11n':\n          return 'wi wi-day-thunderstorm';\n        case '13n':\n          return 'wi wi-day-snow';\n        case '50n':\n          return 'wi wi-day-fog';\n        default:\n          return 'wi wi-day-sunny';\n      }\n        };\n    \n    return { forecastData, formatDate, getWeatherIcon };\n    },\n  };\n  </script>\n  "],"mappings":";;EACSA,KAAK,EAAC;AAAwC;gCACnDC,mBAAA,CAAqE;EAAjED,KAAK,EAAC;AAAyB,GAAC,8BAA4B;;;;;EAE1DA,KAAK,EAAC;AAAM;;;;gCAYhBC,mBAAA,CAA+B,WAA5B,0BAAwB;oBAA3BC,UAA+B,C;;uBAfjCC,mBAAA,CAiBI,OAjBJC,UAiBI,GAhBJC,UAAqE,EAC1DC,MAAA,CAAAC,YAAY,CAACC,MAAM,Q,cAA9BL,mBAAA,CAWM,OAAAM,UAAA,GAVJR,mBAAA,CASK,MATLS,UASK,I,kBARHP,mBAAA,CAOKQ,SAAA,QAAAC,WAAA,CAPkBN,MAAA,CAAAC,YAAY,EAAxBM,QAAQ;yBAAnBV,mBAAA,CAOK;MAPiCW,GAAG,EAAED,QAAQ,CAACE,EAAE;MAAEf,KAAK,EAAC;QAC5DC,mBAAA,CAA2C,WAAvC,QAAM,GAAAe,gBAAA,CAAGV,MAAA,CAAAW,UAAU,CAACJ,QAAQ,CAACE,EAAE,mBACnCd,mBAAA,CAA6C,WAA1C,eAAa,GAAAe,gBAAA,CAAGH,QAAQ,CAACK,IAAI,CAACC,GAAG,IAAG,IAAE,iBACzClB,mBAAA,CAAkD,WAA/C,cAAY,GAAAe,gBAAA,CAAGH,QAAQ,CAACO,UAAU,CAACD,GAAG,IAAG,IAAE,iBAC9ClB,mBAAA,CAAuD,WAApD,aAAW,GAAAe,gBAAA,CAAGH,QAAQ,CAACQ,OAAO,IAAIC,WAAW,kB,iBAAO,GACvD,GAAAN,gBAAA,CAAGH,QAAQ,CAACQ,OAAO,IAAIE,IAAI,IAAG,GAC9B,iBAAAtB,mBAAA,CAAyD;MAArDD,KAAK,EAAAwB,eAAA,CAAElB,MAAA,CAAAmB,cAAc,CAACZ,QAAQ,CAACQ,OAAO,IAAIE,IAAI;;uDAIxDpB,mBAAA,CAEM,OAAAuB,UAAA,EAAAC,UAAA,G"},"metadata":{},"sourceType":"module","externalDependencies":[]}