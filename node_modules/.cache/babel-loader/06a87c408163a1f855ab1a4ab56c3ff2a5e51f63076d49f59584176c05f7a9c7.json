{"ast":null,"code":"import { ref, reactive, watch, onMounted } from 'vue';\nexport default {\n  emits: ['search'],\n  setup(_, {\n    emit\n  }) {\n    const searchQuery = ref('');\n    const showResults = ref(false);\n    const searchResults = reactive([]);\n    const handleInput = () => {\n      if (searchQuery.value.length > 0) {\n        // Perform the search or API request here to get the results based on the search query\n        // Replace the following code with your actual search logic or API request\n        const fakeResults = ['London', 'New York', 'Paris', 'Tokyo', 'Sydney'];\n        searchResults.splice(0, searchResults.length, ...fakeResults);\n        showResults.value = true;\n      } else {\n        searchResults.splice(0, searchResults.length);\n        showResults.value = false;\n      }\n    };\n    const selectResult = result => {\n      searchQuery.value = result;\n      showResults.value = false;\n      emit('search', result);\n    };\n    watch(searchQuery, () => {\n      if (searchQuery.value.length === 0) {\n        showResults.value = false;\n      }\n    });\n    onMounted(() => {\n      const handleClickOutside = event => {\n        if (!event.target.closest('div')) {\n          showResults.value = false;\n        }\n      };\n      window.addEventListener('click', handleClickOutside);\n\n      // Clean up the event listener on component unmount\n      return () => {\n        window.removeEventListener('click', handleClickOutside);\n      };\n    });\n    return {\n      searchQuery,\n      showResults,\n      searchResults,\n      handleInput,\n      selectResult\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","watch","onMounted","emits","setup","_","emit","searchQuery","showResults","searchResults","handleInput","value","length","fakeResults","splice","selectResult","result","handleClickOutside","event","target","closest","window","addEventListener","removeEventListener"],"sources":["/Users/turbanator/Documents/CODING/FRONT-END/weather-app/src/components/searchBar.vue"],"sourcesContent":["<template>\n    <div>\n      <input\n        v-model=\"searchQuery\"\n        type=\"text\"\n        class=\"border p-2 rounded\"\n        placeholder=\"Enter a location\"\n        @input=\"handleInput\"\n      />\n      <ul v-if=\"showResults\" class=\"bg-white border border-gray-300 mt-1 rounded\">\n        <li\n          v-for=\"(result, index) in searchResults\"\n          :key=\"index\"\n          class=\"py-2 px-3 cursor-pointer hover:bg-gray-200\"\n          @click=\"selectResult(result)\"\n        >\n          {{ result }}\n        </li>\n      </ul>\n    </div>\n  </template>\n  \n  <script>\n  import { ref, reactive, watch, onMounted } from 'vue';\n  \n  export default {\n    emits: ['search'],\n    setup(_, { emit }) {\n      const searchQuery = ref('');\n      const showResults = ref(false);\n      const searchResults = reactive([]);\n  \n      const handleInput = () => {\n        if (searchQuery.value.length > 0) {\n          // Perform the search or API request here to get the results based on the search query\n          // Replace the following code with your actual search logic or API request\n          const fakeResults = ['London', 'New York', 'Paris', 'Tokyo', 'Sydney'];\n          searchResults.splice(0, searchResults.length, ...fakeResults);\n  \n          showResults.value = true;\n        } else {\n          searchResults.splice(0, searchResults.length);\n          showResults.value = false;\n        }\n      };\n  \n      const selectResult = (result) => {\n        searchQuery.value = result;\n        showResults.value = false;\n        emit('search', result);\n      };\n  \n      watch(searchQuery, () => {\n        if (searchQuery.value.length === 0) {\n          showResults.value = false;\n        }\n      });\n  \n      onMounted(() => {\n        const handleClickOutside = (event) => {\n          if (!event.target.closest('div')) {\n            showResults.value = false;\n          }\n        };\n        window.addEventListener('click', handleClickOutside);\n  \n        // Clean up the event listener on component unmount\n        return () => {\n          window.removeEventListener('click', handleClickOutside);\n        };\n      });\n  \n      return {\n        searchQuery,\n        showResults,\n        searchResults,\n        handleInput,\n        selectResult\n      };\n    }\n  };\n  </script>\n  \n  <style>\n  /* Add any custom styling here */\n  </style>\n  "],"mappings":"AAuBE,SAASA,GAAG,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,SAAQ,QAAS,KAAK;AAErD,eAAe;EACbC,KAAK,EAAE,CAAC,QAAQ,CAAC;EACjBC,KAAKA,CAACC,CAAC,EAAE;IAAEC;EAAK,CAAC,EAAE;IACjB,MAAMC,WAAU,GAAIR,GAAG,CAAC,EAAE,CAAC;IAC3B,MAAMS,WAAU,GAAIT,GAAG,CAAC,KAAK,CAAC;IAC9B,MAAMU,aAAY,GAAIT,QAAQ,CAAC,EAAE,CAAC;IAElC,MAAMU,WAAU,GAAIA,CAAA,KAAM;MACxB,IAAIH,WAAW,CAACI,KAAK,CAACC,MAAK,GAAI,CAAC,EAAE;QAChC;QACA;QACA,MAAMC,WAAU,GAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC;QACtEJ,aAAa,CAACK,MAAM,CAAC,CAAC,EAAEL,aAAa,CAACG,MAAM,EAAE,GAAGC,WAAW,CAAC;QAE7DL,WAAW,CAACG,KAAI,GAAI,IAAI;MAC1B,OAAO;QACLF,aAAa,CAACK,MAAM,CAAC,CAAC,EAAEL,aAAa,CAACG,MAAM,CAAC;QAC7CJ,WAAW,CAACG,KAAI,GAAI,KAAK;MAC3B;IACF,CAAC;IAED,MAAMI,YAAW,GAAKC,MAAM,IAAK;MAC/BT,WAAW,CAACI,KAAI,GAAIK,MAAM;MAC1BR,WAAW,CAACG,KAAI,GAAI,KAAK;MACzBL,IAAI,CAAC,QAAQ,EAAEU,MAAM,CAAC;IACxB,CAAC;IAEDf,KAAK,CAACM,WAAW,EAAE,MAAM;MACvB,IAAIA,WAAW,CAACI,KAAK,CAACC,MAAK,KAAM,CAAC,EAAE;QAClCJ,WAAW,CAACG,KAAI,GAAI,KAAK;MAC3B;IACF,CAAC,CAAC;IAEFT,SAAS,CAAC,MAAM;MACd,MAAMe,kBAAiB,GAAKC,KAAK,IAAK;QACpC,IAAI,CAACA,KAAK,CAACC,MAAM,CAACC,OAAO,CAAC,KAAK,CAAC,EAAE;UAChCZ,WAAW,CAACG,KAAI,GAAI,KAAK;QAC3B;MACF,CAAC;MACDU,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEL,kBAAkB,CAAC;;MAEpD;MACA,OAAO,MAAM;QACXI,MAAM,CAACE,mBAAmB,CAAC,OAAO,EAAEN,kBAAkB,CAAC;MACzD,CAAC;IACH,CAAC,CAAC;IAEF,OAAO;MACLV,WAAW;MACXC,WAAW;MACXC,aAAa;MACbC,WAAW;MACXK;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}